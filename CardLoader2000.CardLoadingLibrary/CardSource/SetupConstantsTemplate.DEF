Rem Network, protocol and other misc. setup constants - all in one file so that it may be copied in from BlochsTech generator.

Rem PIN code and other security.
Eeprom PIN as Integer = [Pin]
Eeprom PUK as Long = [Puk]
Const DelayLockSeconds = 6
Const AverageAmountsMax = 8
Const WrongCodePunishIncrement = 10
Rem Note that there is a 1.5X limit per charge. This makes sense even with 0 delay because the card cannot use new sources
Rem again right away/there is always some processing time.
Const NoPINAmountsSetting! = 4
Rem Key for display vignere cipher, the last value is used only to shift the entire alphabet table (must be 7 digits):
Const DisplayKey = "[DisplayKey]"

Rem 0 means this smart card is for the original "Bitcoin"-network.
Const NetworkId = 0

Rem 0 means the BlochsTech Open Bitcoin Card (BOBC-0) protocol is expected. (0-5 reserved for BlochsTech use.)
Const ProtocolVersion = 0

Rem 0 means SecurePay card is expected, 1 is ZeroPIN card, 2 is Vault card and 3 is OpenSource card. -> No longer valid!!!
Rem TODO: Re-evaluate this model --> Parametrisize card commands? Mostly the PIN command.
Rem Const CardType = 0

Const CardFeeHash160Addr$ = Chr$(&H92, &H6f, &H97, &H7c, &H89, &Hef, &H30, &H4b, &He7, &Hd3, &He2, &H7c, &Hd9, &He2, &Hd8, &H94, &H38, &H22, &H66, &H33)
Rem If this one is set fee is sent here 1/4 of the time instead of the above address:
Const AltCardFeeHash160Addr$ = ""

Rem After this number of transactions (/10) the fee should go to the alt address.
Const AltCardFeeAddressCount = 40

Rem Interestingly dust limits mean that a higher fee (0.9% vs. 0.1-2%) that expires is better than a lower that does not.
Eeprom CardFeeMultiplier! = [CardFee]
Rem Equals 0.9 percent.
Const ExpireUsageTimes = [ExpireUsageTimes]
Rem Equals about one year of normal use.
Rem In 2007 PBS, the Danish operator of the Dankort system, processed a total of 737 million Dankort transactions. Of these, 4.5 million just on a single day, 21 December. This remains the current record.
Rem At the end of 2007, there were 3.9 million Dankort in existence.
Rem 739 / 365.25 / 3.9 = 0.5 purchase per day per card. Source wiki.
Rem 0 Equals infinite.

Rem Miners fee comes from terminal now!

Const ExpectedDecimals = 8
Rem Code is ready for "any" decimal amount, constant defines what it IS for this cards lifetime.
Rem We COULD get this from the terminal, but the current format is uint64 and we have no idea what the future many-digit format will be.
Rem HOWEVER: We CAN still shape the API so that it is compatible with future formats: Amount is in lowest decimal units (satoshi for 8 decimals) and exp is always positive.
Rem This will be ignored by this card, but future cards can use same call type/BOBC-0 with 9 decimals for instance.

Rem https://github.com/mastercoin-MSC/spec/issues/50
Eeprom Readonly DustLimitSatoshis! = 5460

Rem We use satoshi.
Const InitialAverageAmountSetting! = 10000000

Rem Keys and Addresses, now real, controls 0.095BTC:
Rem Const Addr1 = "14sGUdH8YaYzGwz8WP1oY48rZA68o7X2eS"
Const Addr1 = "[Address]"

Rem 14s...old

Rem 15w... old2

Const Key1 = [PrivateKey]

Const PubKey1 = [PublicKey]

Eeprom ReadOnly Hash160KeyArray(0 To 0) as String*20 = [PublicKeyHash160]
                  
                  Rem ,Chr$(&HE0,&H00,&H00,&H00,&H00,&H00,&H00,&H00,_
                  Rem &H00,&H00,&H00,&H00,&H00,&H00,&H00,&H00,_
                  Rem &H00,&H00,&H00,&H00)_